1. 인스턴스 멤버 - 객체 생성 후 사용할 수 있는 속성, 메소드
2. 정적 멤버 - 객체 생성 없이 사용할 수 있는 
eclipse---Car / _01_static

3. 싱글톤
 - 전체 프로그램에서 단 하나의 객체의 생성만 보장되는 경우 
   (객체에 대해 잘 이해해야 할듯..)
 - 싱글톤 객체의 선언
   static 클래스명 singleton = new 생성자();
 - 싱글톤 객체의 사용
   싱글톤으로 선언된 클래스명.getInstance();로 객체를 얻어서 사용
ec---Singleton / _02_useOfSingleton
 - 싱글톤 객체
	장점 : 객체 한 번만 생성하므로 메모리 낭비를 줄일 수 있음.
	단점 : 싱글톤 객체를 수정할 경우 싱글톤 객체를 사용하는 다른 클래스에 
	        영향을 줄 수 있어서 프로그램 수정이 복잡해진다.
	        이렇게 하나의 객체가 여러 개의 클래스에 영향을 주는 경우에 의존도가 높다고 한다.
	        프로그래밍에서 의존도와 결합도가 낮은 프로그램을 좋은 프로그램이라고 한다.
                    (후에 배울 Spring이 이게 좋다고함)

4. final 필드
 - final 키워드는 프로그램 실행 중 변경할 수 없는 필드(속성)을 선언할 때 사용
   ex) final double PI = 3.14;

	final int WEEKDAYS = 7;
 - final 키워드로 변수 선언 시 초기화 필수
ec---final int price=30000000; 선언 / _03_final


5. 상수
 - 지구에 존재하는 불변 값들(원주율 등..))
 - 상수들은 대부분 대문자로 선언
   ex) static final double PI = 3.14;
 - 상수들은 불변 값이므로 final 키워드를 사용하여 선언
ec---Earth / 04_const

6. 패키지
 - 폴더의 역할과 클래스 식별자의 역할
 - 패키지는 상위 패키지와 하위 패키지로 구분됨
 - .을 이용하여 포함관계를 나타냄(하위패키지는 아래로 몇개라도 상관 없음, (2번째보다 3번째가 하위이면 되는 식)
	상위패키지.하위패키지.하위패키지2...클래스
ec---Day03.com & Day03.com.test 패키지 생성 / Day03.com.test에 test 클래스 생성 / _Day_05

7. 접근 제한자
 - 다른 객체에서 클래스나 속성, 메소드에 접근하는 것을 제한하기 위해 사용
 - 보안의 목적으로 접근 제한자를 걸어서 데이터 유출 방지
 - 접근 제한자의 종류
	1) public : 어떤 클래스에서든 접근 가능한 접근 제한자
	2) protected : 같은 패키지 내의 클래스나 자식 클래스에서만 접근 가능한 접근 제한자
	3) private : 모든 접근이 막혀 있는 접근 제한자
	4) default : 같은 패키지 내의 클래스에서만 접근 가능한 접근 제한자
	5) class 클래스명 {
		}  <==== default 접근 제한자 적용된 상태
ec---Day03.com.test1 생성 / Day03.com.test안에 A,B,D클래스 생성 / Day03.com.test1안에 C클래스 생성
   ---(A클래스에서 접근 제한자 만들고 B, C클래스에서(서로 다른 패키지) 접근 되는지 안되는지 확인해보는 작업 함
   ---		//protected는 조금 더 진도 나가고 해보기로 함

 - 클래스는 private, protected 선언할 수 없음
   private, protected는 클래스 내의 필드(속성), 메소드 선언 할 때 사용한다

 8. getter/setter 메소드
 - 객체지향언어에서는 객체의 필드 값을 외부에서 수정하는 것을 막음
 - 대부분 필드의 선언 private 접근 제한자를 이용하여 선언
 - private 접근 제한자로 선언된 필드의 값을 가져오거나 변경할 때 getter/setter 메소드 사용
ec---Day03으로 돌아와서 userInfo클래스 / _06_getter_setter

9. 상속
 - 상속은 클래스 간의 부모, 자식관계 정의
 - 자식 클래스에서 부모 클래스를 상속받아 부모클래스에 있는 필드, 메소드를 직접 사용
ec---SamsungTv 클래스 / LgTv클래스/ Tv클래스 / _07_inherit
   ---Tv클래스가 부모 클래스이고, LgTv와 SamsungTv가 자식 클래스이고, Tv클래스에서 정보를 상속 받아서 사용한다.(extends 사용)
 - 상속을 사용하는 이유 : 클래스간의 중복코드를 제거해서 작업 복잡성을 낮춤
   (예로, 삼성tv와 lgtv의 정보를 동시에 관리할 때 가격의 값이 필요 없어졌을 경우 삭제해야 되는데
    상속을 사용하지 않으면 삼성과 엘지에서 각각 삭제해야 하는데 부모 코드가 있으면 거기에서
    한 번만 삭제하면 되므로 편하다.)



























